cs40 hw06 um
Matthew Wong (mwong14) and Ivi Fung (sfung02)

Acknowledgements: We would like to thank the creator of advent.umz for
entertaining us for at least 20 minutes.
Asli-- for helping us figure out how to calculate our UMs runtime on
50 million instructions!!! MVP fr.

Implementation Notes: To our knowledge, we have implemented every aspect of
the spec correctly. 

Departures from Design: We combined four of our modules originally listed in
design (Fetcher, Decoder, Executor, and Registers) into a single 
module-- CPU.

Architecture Description:
        - CPU: This module is responsible for arithmetic and logical 
        operations performed by the Universal Machine. This module
        fetches, decodes, and executes instructions-- writing to
        and accessing both the registers and segmented memory as needed. 
        CPU knows the values stored in the UM's registers, the 
        location pointed to by the 32-bit program counter, the
        names of input and ouput files for I/O, and the list of possible
        instructions our machine can execute.
        - Memory: This module represents the main segmented memory, for 
        both getting and setting values. Memory knows which segments
        are currently mapped and unmapped, as well as which previously
        used segments have been unmapped are are ready for reuse. Memory is
        used by CPU (both setting and getting) in order to retrieve and
        execute instructions.
        - Segment: This module represents a single individual segment 
        within the Universal Machine's memory. Segment knows the size
        (in words) of the segment and can get and set specific words
        of the segment. Segment is used by Memory to manipulate
        specific segments.
        
Unit Tests (UMTESTS):
Halt-- These verify that halt is functioning properly
        - haltTest: Halts
        - haltAfterTest: Halts, with some commands after that print
        if halt did not completely halt computation
        - instructionsBeforeHalt: Runs some instructions, then halts, with
        some commands following the halt that print if the halt did not 
        completely halt computation
Load Value-- These verify that load value is functioning properly
        - addTest: Loads two values, adds them together, 
        then checks the result
        - printSizeTest: Loads two values, adds them together, 
        then checks the result via printing/output
Add-- These verify that add is functioning properly
        - add_twoZerosTest: Add two zeros together, then check the 
        result is zero
        - add_twoNonzerosTest: Add two nonzero numbers together, 
        then check the result
        - add_threeNumsTest: Add two nonzero numbers together, 
        add that sum to another number, then check the result
        - add_toSelfTest: Add register to itself, then check the result
Multiply-- These verify that multiply is functioning properly
        - mult_twoZerosTest: Multiply two zeros together, then check the 
        result is zero
        - mult_twoNonzerosTest: Multiply two nonzero numbers together, 
        then check the result
        - mult_threeNumsTest: Multiply two nonzero numbers together, 
        add that sum to another number, then check the result
        - mult_toSelfTest: Multiply register to itself, then check the result
Divide-- These verify that divide is functioning properly
        - div_evenIdentityTest: Divide an even number by 1, then check 
        that the result is the same number
        - div_oddIdentityTest: Divide an odd number by 1, then check 
        that the result is the same number
        - div_evenByTwoTest: Divide an even number by 2, then check the result
        - div_oddByTwoTest: Divide an odd number by 2, then check the result
        - div_bySelfTest: Divide a register by itself, then check the result 
        is 1
Cmove-- These verify that cmove is functioning properly
        - cmove_moveTest: Cmoves based on a condition register that does not
        contain 0, then checks that the cmove occured via checking the target 
        register's value
        - cmove_stayTest: Cmoves based on a condition register that contains 0,
        then checks that the cmove did not occur via checking the target 
        register's value
Output-- These verify that output is functioning properly
        - printAllCharactersTest: Prints out 255 characters without jumps
        - jumpOnZeroTest: Prints all 255 characters using an UM "loop"
        - printLetters: Prints a...z then A...Z
Input-- These verify that input is functioning properly
        - printGivenCharsTest: Tries to print back all of the data inputted
        - takeInputTest: Tries to take the input "hi!" and responds "ok" 
        if received
        - readAllChars: Reads all possible 256 characters and prints them out
        - readRandomChars: Reads a set of random characters and prints them out
Nand-- These verify that nand is functioning properly
        - nandTest: Checks possible nands between 0 and 0xffffffff,
        printing YAY if the nands produce the correct value and BAD otherwise
Map/Unmap Seg-- These verify that memory mapping and unmapping are
functioning properly
        - segTest: Creates new segments of size 0 and 4, 
        set/get from size 4, and frees

Additional tests (on reading and writing segmented memory) can be 
found in test.c

Timing Our UM:
It takes our UM 10.61 seconds to perform 85070522 instructions 
(as measured by using the time command while running midmark.um). This
is about 1.247e-7 seconds per instuction. Thus, we believe that it takes our
UM about 6.236 seconds to perform 50 million instructions. 
1.245e-7 * 50000000 ~= 6.236

Time Spent on This Assignment:
        - Analysis: 2h
        - Design: 8h
        - Problem Solving: 8h
        - Testing: 10h
cs40 hw06 um
Matthew Wong (mwong14) and Ivi Fung (sfung02)

Acknowledgements: We would like to thank the creator of advent.umz for
entertaining us for at least 20 minutes.
Asli-- for helping us figure out how to calculate our UMs runtime on
50 million instructions!!! MVP fr.

Implementation Notes: To our knowledge, we have implemented every aspect of
the spec correctly. 

Departures from Design: We combined four of our modules originally listed in
design (Fetcher, Decoder, Executor, and Registers) into a single 
module-- CPU.

Architecture Description:
        - CPU: This module is responsible for arithmetic and logical 
        operations performed by the Universal Machine. This module
        fetches, decodes, and executes instructions-- writing to
        and accessing both the registers and segmented memory as needed. 
        CPU knows the values stored in the UM's registers, the 
        location pointed to by the 32-bit program counter, and the
        names of input and ouput files for I/O.
        - Memory: This module represents the main segmented memory, for 
        both getting and setting values. Memory knows which segments
        are currently mapped and unmapped, as well as which previously
        used segments have been unmapped are are ready for reuse. Memory is
        used by CPU (both setting and getting) in order to retrieve and
        execute instructions.
        - Segment: This module represents a single individual segment 
        within the Universal Machine's memory. Segment knows the size
        (in words) of the segment and can get and set specific words
        of the segment. Segment is used by Memory to manipulate
        specific segments.
        
Unit Tests:
Add-- These verify that add is functioning properly
        - add_twoZerosTest: Add two zeros together, then check the 
        result is zero
        - add_twoNonzerosTest: Add two nonzero numbers together, 
        then check the result
        - add_threeNumsTest: Add two nonzero numbers together, 
        add that sum to another number, then check the result
        - add_toSelfTest: Add register to itself, then check the result
Multiply-- These verify that multiply is functioning properly
        - mult_twoZerosTest: Multiply two zeros together, then check the 
        result is zero
        - mult_twoNonzerosTest: Multiply two nonzero numbers together, 
        then check the result
        - mult_threeNumsTest: Multiply two nonzero numbers together, 
        add that sum to another number, then check the result
        - mult_toSelfTest: Multiply register to itself, then check the result
Divide-- These verify that divide is functioning properly
        - div_evenIdentityTest: Divide an even number by 1, then check 
        that the result is the same number


Timing Our UM:
It takes our UM 10.61 seconds to perform 85070522 instructions 
(as measured by using the time command while running midmark.um). This
is about 1.247e-7 seconds per instuction. Thus, we believe that it takes our
UM about 6.236 seconds to perform 50 million instructions. 
1.245e-7 * 50000000 ~= 6.236

Time Spent on This Assignment:
        - Analysis: 2h
        - Design: 8h
        - Problem Solving: 8h
        - Testing: 6h